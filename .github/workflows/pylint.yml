name: Pylint

on:
  push:
    branches:
      - main
    paths:
      - "**/*.py"
      - "**/*.cpp"
      - "pyTGM/**"
      - "CMakeLists.txt"
      - ".github/workflows/pyTGM.yml"

jobs:
  compile-and-lint:
    runs-on: ubuntu-latest
    env:
      BUILT_MODULE: ${{ github.workspace }}/built_module
      STUBS: ${{ github.workspace }}/stubs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade pybind11 pybind11-stubgen setuptools wheel pylint

      - name: Build C++ extensions via CMake
        run: |
          mkdir -p build && cd build
          pybind11_DIR=$(python -m pybind11 --cmakedir)
          # Configure CMake; your CMakeLists.txt should have separate targets for each module
          cmake -Dpybind11_DIR=${pybind11_DIR} -DCMAKE_BUILD_TYPE=Release ..
          cmake --build . --config Release --parallel
          # Copy all shared libraries (*.so) from the build directory into built_module
          mkdir -p "${{ env.BUILT_MODULE }}"
          find . -type f -name '*.so' -exec cp {} "${{ env.BUILT_MODULE }}" \;
          echo "Built modules:"
          ls -la "${{ env.BUILT_MODULE }}"

      - name: Generate stubs for each module
        env:
          PYTHONPATH: ${{ env.BUILT_MODULE }}
        run: |
          mkdir -p "${{ env.STUBS }}"
          # List of modules to generate stubs for. Adjust as needed.
          for mod in pyTGM pyTGM_encrypt pyTGM_pattern pyTGM_terminal; do
              echo "Generating stub for module: $mod"
              pybind11-stubgen $mod -o "${{ env.STUBS }}"
          done
          echo "Stubs generated:"
          ls -la "${{ env.STUBS }}"

      - name: Run pylint on Python files
        env:
          PYTHONPATH: ${{ env.BUILT_MODULE }}:${{ env.STUBS }}
        run: |
          pylint $(git ls-files '*.py')
