name: Pylint

on:
  push:
    branches:
      - main
    paths:
      - "pyTGM/**"
      - "CMakeLists.txt"
      - ".github/workflows/pylint.yml"
      - ".pylintrc"
      - "setup.py"

jobs:
  compile-and-lint:
    runs-on: ubuntu-latest
    env:
      BUILT_MODULE: ${{ github.workspace }}/built_module
      STUBS: ${{ github.workspace }}/stubs
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential
          python -m pip install --upgrade pip
          pip install nanobind setuptools wheel pylint mypy stubgen

      - name: Build C++ extensions
        run: |
          mkdir -p build
          cd build
          cmake ..
          cmake --build . --config Release
          cd ..

          mkdir -p "built_module/pyTGM/"{encrypt,terminal,sound}

          find build -name "*.so" -exec bash -c '
            for f; do
              if [[ $f == *"/encrypt/"* ]]; then
                cp "$f" "built_module/pyTGM/encrypt/"
              elif [[ $f == *"/terminal/"* ]]; then
                cp "$f" "built_module/pyTGM/terminal/"
              elif [[ $f == *"/sound/"* ]]; then
                cp "$f" "built_module/pyTGM/sound/"
              else
                cp "$f" "built_module/pyTGM/"
              fi
            done
          ' bash {} +

      - name: Generate stubs & run pylint
        env:
          PYTHONPATH: ${{ github.workspace }}/built_module:${{ github.workspace }}/stubs:${{ github.workspace }}
        run: |
          mkdir -p "${{ github.workspace }}/stubs"

          submodules=(
            "pyTGM.sound"
            "pyTGM.encrypt"
            "pyTGM.encrypt.hk512"
            "pyTGM.encrypt.b64"
            "pyTGM.rect"
            "pyTGM.terminal"
            "pyTGM.terminal.clear"
            "pyTGM.terminal.color"
            "pyTGM.terminal.geky"
            "pyTGM.terminal.pos"
          )
          echo "submodules=${submodules[*]}" >> $GITHUB_ENV

          for mod in ${{ env.submodules }}; do
            echo "Generating stubs for $mod"
            stubgen -m "$mod" -o "${{ github.workspace }}/stubs"
          done

          pip install .

          pylint $(git ls-files '*.py')
