name: Pylint

on:
  push:
    branches:
      - main
    paths:
      - "**/*.py"
      - "**/*.cpp"
      - "**/*.hpp"
      - "**/*.pyx"
      - "pyTGM/**"
      - "CMakeLists.txt"
      - ".github/workflows/pylint.yml"
      - ".pylintrc"

jobs:
  compile-and-lint:
    runs-on: ubuntu-latest
    env:
      BUILT_MODULE: ${{ github.workspace }}/built_module
      STUBS: ${{ github.workspace }}/stubs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade Cython setuptools wheel pylint mypy

      - name: Build Cython extensions
        run: |

          # The following was generated by a tool
          python setup.py build_ext --inplace
          mkdir -p "${{ github.workspace }}/built_module/pyTGM/encrypt/hk512"
          mkdir -p "${{ github.workspace }}/built_module/pyTGM/encrypt/b64"
          mkdir -p "${{ github.workspace }}/built_module/pyTGM/terminal/clear"
          mkdir -p "${{ github.workspace }}/built_module/pyTGM/terminal/color"
          mkdir -p "${{ github.workspace }}/built_module/pyTGM/terminal/geky"
          mkdir -p "${{ github.workspace }}/built_module/pyTGM/terminal/pos"
          
          cp pyTGM/encrypt/hk512/hk512.so "${{ github.workspace }}/built_module/pyTGM/encrypt/"
          cp pyTGM/encrypt/b64/b64.so "${{ github.workspace }}/built_module/pyTGM/encrypt/"
          cp pyTGM/terminal/clear/clear.so "${{ github.workspace }}/built_module/pyTGM/terminal/"
          cp pyTGM/terminal/color/color.so "${{ github.workspace }}/built_module/pyTGM/terminal/"
          cp pyTGM/terminal/geky/geky.so "${{ github.workspace }}/built_module/pyTGM/terminal/"
          cp pyTGM/terminal/pos/pos.so "${{ github.workspace }}/built_module/pyTGM/terminal/"
          cp pyTGM/sound/sound.so "${{ github.workspace }}/built_module/pyTGM/"
          cp pyTGM/rect/rect.so "${{ github.workspace }}/built_module/pyTGM/"

          find "${{ github.workspace }}/built_module" -type f -name '*.so'

      - name: Generate stubs for each module
        env:
          PYTHONPATH: ${{ github.workspace }}/built_module
        run: |
          mkdir -p "${{ github.workspace }}/stubs"
          for mod in pyTGM  pyTGM.sound pyTGM.encrypt pyTGM.encrypt.hk512 pyTGM.encrypt.b64 pyTGM.rect pyTGM.terminal pyTGM.terminal.clear pyTGM.terminal.color pyTGM.terminal.geky pyTGM.terminal.pos; do
              echo "Generating stub for module: $mod"
              stubgen $mod -o "${{ github.workspace }}/stubs"
          done
          echo "Stubs generated:"
          ls -la "${{ github.workspace }}/stubs"
          ls

      - name: Run pylint on Python files
        env:
          PYTHONPATH: ${{ github.workspace }}/built_module:${{ github.workspace }}/stubs
        run: |
          pylint $(git ls-files '*.py')
