name: Pylint

on:
  push:
    branches:
      - main
    paths:
      - "**/*.py"
      - "**/*.cpp"
      - "pyTGM/**"
      - "CMakeLists.txt"
      - ".github/workflows/pylint.yml"

jobs:
  compile-and-lint:
    runs-on: ubuntu-latest
    env:
      BUILT_MODULE: ${{ github.workspace }}/built_module
      STUBS: ${{ github.workspace }}/stubs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade pybind11 pybind11-stubgen setuptools wheel pylint

      - name: Build C++ extensions via CMake
        run: |
          mkdir -p build && cd build
          pybind11_DIR=$(python -m pybind11 --cmakedir)
          cmake -Dpybind11_DIR=${pybind11_DIR} -DCMAKE_BUILD_TYPE=Release ..
          cmake --build . --config Release --parallel
          # Create a folder structure matching the package:
          mkdir -p "${{ github.workspace }}/built_module/pyTGM/encrypt"
          mkdir -p "${{ github.workspace }}/built_module/pyTGM/pattern"
          mkdir -p "${{ github.workspace }}/built_module/pyTGM/terminal"

          # The following is generatedby a tool
          cp hk512.so "${{ github.workspace }}/built_module/pyTGM/encrypt/"
          cp b64.so "${{ github.workspace }}/built_module/pyTGM/encrypt/"
          cp rect.so "${{ github.workspace }}/built_module/pyTGM/pattern/"
          cp clear.so "${{ github.workspace }}/built_module/pyTGM/terminal/"
          cp color.so "${{ github.workspace }}/built_module/pyTGM/terminal/"
          cp geky.so "${{ github.workspace }}/built_module/pyTGM/terminal/"
          cp pos.so "${{ github.workspace }}/built_module/pyTGM/terminal/"
          cp sound.so "${{ github.workspace }}/built_module/pyTGM/"

          # The rest is not by a tool
          find "${{ github.workspace }}/built_module" -type f -name '*.so'

      - name: Generate stubs for each module
        env:
          PYTHONPATH: ${{ github.workspace }}/built_module
        run: |
          mkdir -p "${{ github.workspace }}/stubs"
          for mod in pyTGM pyTGM.encrypt.hk512; do
              echo "Generating stub for module: $mod"
              pybind11-stubgen $mod -o "${{ github.workspace }}/stubs"
          done
          echo "Stubs generated:"
          ls -la "${{ github.workspace }}/stubs"

      - name: Run pylint on Python files
        env:
          PYTHONPATH: ${{ github.workspace }}/built_module:${{ github.workspace }}/stubs
        run: |
          pylint $(git ls-files '*.py')
